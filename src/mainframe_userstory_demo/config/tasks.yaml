userstorycreator_task:
  description: >
    Input Instructions for the Agent:
    Analyze the provided Java business rules carefully, focusing on the following aspects:

    Core functionalities and objectives.
    Input validation requirements.
    Business logic and calculations.
    Data persistence and file-handling rules.
    System behavior, including error handling and reporting.
    Decompose the rules into smaller, actionable tasks relevant to Domain-Driven Design (DDD) principles:

    Identify distinct domains (e.g., Loan Account Management, Loan Transactions).
    Define bounded contexts for each domain.
    Create user stories that adhere to the following structure:

    Title: A concise description of the functionality.
    As a [type of user], I want [action], so that [benefit/purpose].
    Acceptance Criteria: Define the conditions for successful implementation.
    Technical Notes: Provide key implementation details or dependencies.
    Dependencies: Specify any external APIs, data sources, or other requirements.

  expected_output:
    The output will contain a valid JSON file with a collection of Jira User Stories with 
    corresponding Name, Title, Acceptance Criteria, Technical Notes, Dependencies, 
    Additional Criteria if applicable and nothing additional. Make sure you are giving a 
    valid JSON file as output.
  agent: userstorycreator


# # User story reviewer task
# userstoryreviewer_task:
#   description: >
#     Understand first how many number of microservices can be created from for business rules created by the agent userstorycreator .
#     Cluster the Userstories based on the dependencies and business importance and the micoservices you have already identified 
#     Generate user stories to help a Java developer to do the low level design and implement a microservices-based application. 
#     User Story Formatting: For each business rule, create a Jira User Story in the format:
#         Title: A concise summary (e.g., "As a [role], I want to [action], so that [benefit].")
#         Acceptance Criteria: List the conditions required for the User Story to be considered complete.
#         Dependencies: Document any dependencies or related systems (e.g., mainframe-specific details).
#         Technical Notes: Include any technical constraints, limitations, or integration notes for mainframe systems to help developers understand the context.
#     Additional Details:
#         Ensure clarity in language for both technical and non-technical stakeholders.
#         Prioritize stories based on dependency mapping or business importance if known
#   expected_output: >
#     The output will contain a valid JSON file with a collection of Jira User Stories with corresponding Name, Title, Acceptance Criteria, Technical Notes, Dependencies, Additional Criteria if applicable and nothing additional.
#     Make sure you are giving a valid JSON file as output.
#   agent: userstoryreviewer


